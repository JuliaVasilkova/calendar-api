Исходя из CAP-теоремы о том, что одновременно данные не могут быть согласованными, доступными и являться устойчивыми к сбоям
системы, в своем сервисе «Календарь» я отдам предпочтение свойствам свойствам Consistency(целостность) и Partition tolerance
(Устойчивость к разделению системы).

Consistency
Всё-таки в календаре как правило необходимо иметь точные и достоверные данные. Если, к примеру, у тебя назначена встреча с
мэром в 19.00 , то здесь важно всё - и то, что встреча будет ровно в 19.00, и то что встречаемся мы именно с мэром, те дело
очень высокой важности.

Partition tolerance
Ну, здесь я подразумеваю, что данные копируются в процессе сохранения и выбранная для хранения информации база данных
устойчива к отказам узлов и умеет перестраиваться за адекватное время, дабы выдать клиенту информацию о событии.

Avaitability
Доступность актуальных данный в любой момент времени, после добавления их в базу полезная вещь, однако в календаре, как
правило данные крайне редко проверяются и обновляются каждую секунду, поэтому мы можем на клиентской части приложения
кэшировать данные время от времени и этого вполне будет достаточно для периодической проверки их наличия и актуальности. При
это каждое событие владелец календаря проверяет как правило несколько раз - чтобы построить долгосрочные или краткосрочные,
или просто глянуть, что он собирался сделать. Те здесь на снова спасает кэширование на клиенте и выручает как раз тот факт,
что довольно редко и не многократно данные будут проверяться.
